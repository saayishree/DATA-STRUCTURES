#include<iostream.h>
#include<conio.h>
class Node
{
 public:
 int data;
 Node *next;
 void create();
 void print(Node*);
 void merge();
 }*head1=NULL,*head2=NULL,*head3=NULL;
 void Node:: create()
 {
  int n1,n2;
  cout<<"ENTER THE NO OF ELEMENTS FOR FIRST LINKED LIST: ";
  cin>>n1;
  cout<<"\nENTER THE NO OF ELEMENTS FOR SECOND LINKED LIST: ";
  cin>>n2;
  int i,data;
  cout<<"\nENTER THE DATA ELEMENTS FOR FIRST LINKED LIST: ";
  Node *temp;
  for(i=1;i<=n1;i++)
  {
   cin>>data;
    Node *ptr1=new Node();
    if(head1==NULL)
    {
      ptr1->data=data;
      head1=temp=ptr1;
      ptr1->next=NULL;

     }
     else
     {
      ptr1->data=data;
      ptr1->next=NULL;
      temp->next=ptr1;
      temp=ptr1;
      }
  }
  cout<<"\nENTER THE ELEMENTS FOR SECOND LINKED LIST: ";
  for(i=1;i<=n2;i++)
  {
   cin>>data;
   Node *ptr2=new Node();
   if(head2==NULL)
   {
    ptr2->data=data;
    head2=temp=ptr2;
    ptr2->next=NULL;
    }
    else
    {
     ptr2->data=data;
     ptr2->next=NULL;
     temp->next=ptr2;
     temp=ptr2;
     }
   }
 }
 void Node:: print(Node *head)
 {
  Node *ptr=head;
  cout<<"\n";
  while(ptr!=NULL)
  {
   cout<<ptr->data<<" ";
   ptr=ptr->next;
   }
 }

 void Node:: merge()
 {
 int arr[100],i=0,cnt=0,j,temp;
 Node *ptr3,*t,*ptr1=head1,*ptr2=head2;
 //Copying into array
 while(ptr1!=NULL)
 {
  arr[i]=ptr1->data;
  ptr1=ptr1->next;
  i++;
  cnt++;
 }
while(ptr2!=NULL)
 {
  arr[i]=ptr2->data;
  ptr2=ptr2->next;
  i++;
  cnt++;

 }
 //Sorting the array
for(i=0;i<cnt-1;i++)
{
for(j=i+1;j<cnt;j++)
{
 if(arr[i]>arr[j])
 {
  temp=arr[i];
  arr[i]=arr[j];
  arr[j]=temp;
 }
}
}
//Creating the linked list
for(i=0;i<cnt;i++)
{
 ptr3=new Node();
 if(head3==NULL)
 {
  ptr3->data=arr[i];
  ptr3->next=NULL;
  head3=t=ptr3;
 }
 else
 {
 ptr3->data=arr[i];
 ptr3->next=NULL;
 t->next=ptr3;
 t=ptr3;
 }
}
}




 void main()
 {
  clrscr();
  Node n;
  n.create();
  cout<<"\nPRINT LINKED LIST-1 ELEMENTS: ";
  n.print(head1);
  cout<<"\nPRINT LINKED LIST-2 ELEMENTS: ";
  n.print(head2);
  n.merge();
  cout<<"\nPRINT NEW LIST(AFTER MERGING TWO): ";
  n.print(head3);
  getch();
  }
  //Output:
  /*
  ENTER THE NO OF ELEMENTS FOR FIRST LINKED LIST: 5

ENTER THE NO OF ELEMENTS FOR SECOND LINKED LIST: 4

ENTER THE DATA ELEMENTS FOR FIRST LINKED LIST:
2
3
5
6
8

ENTER THE ELEMENTS FOR SECOND LINKED LIST:
-3
-1
2
7

PRINT LINKED LIST-1 ELEMENTS:
2 3 5 6 8
PRINT LINKED LIST-2 ELEMENTS:
-3 -1 2 7
PRINT NEW LIST(AFTER MERGING TWO):
-3 -1 2 2 3 5 6 7 8
*/

